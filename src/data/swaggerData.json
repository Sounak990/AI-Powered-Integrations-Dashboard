{
	"openapi": "3.0.0",
	"info": {
		"title": "Unified API for Integrations, Connections, and RAG Chat Completions",
		"version": "1.0.0",
		"description": "This API provides endpoints for managing integrations, performing RAG-based chat completions, and handling connections."
	},
	"servers": [
		{
			"url": "https://api.dev.chainwide.io"
		}
	],
	"paths": {
		"/create_integration_type_1": {
			"post": {
				"summary": "Create Type 1 Integration",
				"description": "Creates a new integration of type 1, typically involving OAuth credentials.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"client_id": {
										"type": "string",
										"description": "The client ID for the integration."
									},
									"client_secret": {
										"type": "string",
										"description": "The client secret for the integration."
									},
									"provider": {
										"type": "string",
										"description": "The provider of the integration (e.g., 'salesforce')."
									},
									"tenant_id": {
										"type": "string",
										"description": "The ID of the tenant associated with the integration."
									},
									"integration_name": {
										"type": "string",
										"description": "The name of the integration."
									},
									"integration_description": {
										"type": "string",
										"description": "The description of the integration."
									}
								},
								"required": [
									"client_id",
									"client_secret",
									"provider",
									"tenant_id"
								]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Integration created successfully.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "boolean",
											"description": "Status of the operation."
										},
										"message": {
											"type": "string",
											"description": "Message describing the result."
										},
										"integration_id": {
											"type": "string",
											"description": "The ID of the created integration."
										},
										"nango": {
											"type": "object",
											"description": "Nango integration details.",
											"properties": {
												"nango_integration_id": {
													"type": "string",
													"description": "The Nango integration ID."
												},
												"nango_connection_id": {
													"type": "string",
													"description": "The Nango connection ID."
												}
											}
										},
										"provider": {
											"type": "string",
											"description": "The provider of the integration."
										},
										"tenant_id": {
											"type": "string",
											"description": "The tenant ID of the integration."
										},
										"status": {
											"type": "string",
											"description": "The status of the integration."
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Integrations"
				]
			}
		},
		"/confirm_integration_type_1": {
			"post": {
				"summary": "Confirm Type 1 Integration",
				"description": "Confirms the creation of an integration of type 1, typically after OAuth flow.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"integration_id": {
										"type": "string",
										"description": "The ID of the integration."
									},
									"client_id": {
										"type": "string",
										"description": "The client ID for the integration."
									},
									"client_secret": {
										"type": "string",
										"description": "The client secret for the integration."
									},
									"provider": {
										"type": "string",
										"description": "The provider of the integration (e.g., 'salesforce')."
									},
									"tenant_id": {
										"type": "string",
										"description": "The ID of the tenant associated with the integration."
									},
									"nango_integration_id": {
										"type": "string",
										"description": "The Nango integration ID."
									},
									"nango_connection_id": {
										"type": "string",
										"description": "The Nango connection ID."
									},
									"integration_name": {
										"type": "string",
										"description": "The name of the integration."
									},
									"integration_description": {
										"type": "string",
										"description": "The description of the integration."
									}
								},
								"required": [
									"integration_id",
									"client_id",
									"client_secret",
									"provider",
									"tenant_id",
									"nango_integration_id",
									"nango_connection_id"
								]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Integration confirmed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "boolean",
											"description": "Status of the operation."
										},
										"message": {
											"type": "string",
											"description": "Message describing the result."
										},
										"sync_details": {
											"type": "object",
											"description": "Details of the sync operation."
										},
										"integration_status": {
											"type": "string",
											"description": "The status of the integration."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Integration not found or already confirmed.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Integrations"
				]
			}
		},
		"/view_integration/integration_id": {
			"get": {
				"summary": "Get Integration by ID",
				"description": "Retrieves a specific integration by its ID.",
				"parameters": [
					{
						"name": "integration_id",
						"in": "query",
						"required": true,
						"description": "The ID of the integration.",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful retrieval of the integration.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"description": "Integration details.",
									"properties": {
										"integration_type": {
											"type": "string",
											"description": "The type of the integration."
										},
										"integration_id": {
											"type": "string",
											"description": "The ID of the integration."
										},
										"integration_name": {
											"type": "string",
											"description": "The name of the integration."
										},
										"integration_description": {
											"type": "string",
											"description": "The description of the integration."
										},
										"integration_sync_status": {
											"type": "string",
											"description": "The sync status of the integration."
										},
										"integration_sync_time": {
											"type": "string",
											"format": "date-time",
											"description": "The last sync time of the integration."
										},
										"tenant_id": {
											"type": "string",
											"description": "The ID of the tenant associated with the integration."
										},
										"client_id": {
											"type": "string",
											"description": "The client ID for the integration."
										},
										"client_secret": {
											"type": "string",
											"description": "The client secret for the integration."
										},
										"provider": {
											"type": "string",
											"description": "The provider of the integration."
										},
										"oauth_scopes": {
											"type": "string",
											"description": "The OAuth scopes for the integration."
										},
										"api_key": {
											"type": "string",
											"description": "The API key for the integration."
										},
										"file_urls": {
											"type": "array",
											"items": {
												"type": "string"
											},
											"description": "The URLs of the files associated with the integration."
										},
										"file_metadata": {
											"type": "array",
											"items": {
												"type": "object",
												"description": "Metadata of the files associated with the integration."
											},
											"description": "The metadata of the files associated with the integration."
										},
										"nango_integration_id": {
											"type": "string",
											"description": "The Nango integration ID."
										},
										"nango_connection_id": {
											"type": "string",
											"description": "The Nango connection ID."
										},
										"integration_status": {
											"type": "string",
											"description": "The status of the integration."
										},
										"message": {
											"type": "string",
											"description": "The message associated with the integration."
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "The creation time of the integration."
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"description": "The last update time of the integration."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Integration not found.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Integrations"
				]
			}
		},
		"/view_integration/tenant_id": {
			"get": {
				"summary": "Get Integrations by Tenant ID",
				"description": "Retrieves all integrations associated with a given tenant ID.",
				"parameters": [
					{
						"name": "tenant_id",
						"in": "query",
						"required": true,
						"description": "The ID of the tenant.",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful retrieval of integrations.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "object",
										"description": "Integration details.",
										"properties": {
											"integration_type": {
												"type": "string",
												"description": "The type of the integration."
											},
											"integration_id": {
												"type": "string",
												"description": "The ID of the integration."
											},
											"integration_name": {
												"type": "string",
												"description": "The name of the integration."
											},
											"integration_description": {
												"type": "string",
												"description": "The description of the integration."
											},
											"integration_sync_status": {
												"type": "string",
												"description": "The sync status of the integration."
											},
											"integration_sync_time": {
												"type": "string",
												"format": "date-time",
												"description": "The last sync time of the integration."
											},
											"tenant_id": {
												"type": "string",
												"description": "The ID of the tenant associated with the integration."
											},
											"client_id": {
												"type": "string",
												"description": "The client ID for the integration."
											},
											"client_secret": {
												"type": "string",
												"description": "The client secret for the integration."
											},
											"provider": {
												"type": "string",
												"description": "The provider of the integration."
											},
											"oauth_scopes": {
												"type": "string",
												"description": "The OAuth scopes for the integration."
											},
											"api_key": {
												"type": "string",
												"description": "The API key for the integration."
											},
											"file_urls": {
												"type": "array",
												"items": {
													"type": "string"
												},
												"description": "The URLs of the files associated with the integration."
											},
											"file_metadata": {
												"type": "array",
												"items": {
													"type": "object",
													"description": "Metadata of the files associated with the integration."
												},
												"description": "The metadata of the files associated with the integration."
											},
											"nango_integration_id": {
												"type": "string",
												"description": "The Nango integration ID."
											},
											"nango_connection_id": {
												"type": "string",
												"description": "The Nango connection ID."
											},
											"integration_status": {
												"type": "string",
												"description": "The status of the integration."
											},
											"message": {
												"type": "string",
												"description": "The message associated with the integration."
											},
											"created_at": {
												"type": "string",
												"format": "date-time",
												"description": "The creation time of the integration."
											},
											"updated_at": {
												"type": "string",
												"format": "date-time",
												"description": "The last update time of the integration."
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Integrations"
				]
			}
		},
		"/delete_integration": {
			"delete": {
				"summary": "Delete Integration",
				"description": "Deletes a specific integration by its ID and tenant ID.",
				"parameters": [
					{
						"name": "integration_id",
						"in": "query",
						"required": true,
						"description": "The ID of the integration to delete.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "tenant_id",
						"in": "query",
						"required": true,
						"description": "The ID of the tenant.",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Integration deleted successfully.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "boolean",
											"description": "Status of the operation."
										},
										"message": {
											"type": "string",
											"description": "Message describing the result."
										},
										"integration_id": {
											"type": "string",
											"description": "The ID of the deleted integration."
										},
										"tenant_id": {
											"type": "string",
											"description": "The ID of the tenant associated with the integration."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Integration not found.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Integrations"
				]
			}
		},
		"/refresh_integration": {
			"post": {
				"summary": "Refresh Integration",
				"description": "Refreshes the data for a specific integration.",
				"parameters": [
					{
						"name": "integration_id",
						"in": "query",
						"required": true,
						"description": "The ID of the integration to refresh.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "force_refresh",
						"in": "query",
						"required": false,
						"description": "Force refresh the connection",
						"schema": {
							"type": "boolean",
							"default": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Integration refreshed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "boolean",
											"description": "Status of the operation."
										},
										"message": {
											"type": "string",
											"description": "Message describing the result."
										},
										"integration_id": {
											"type": "string",
											"description": "The ID of the refreshed integration."
										},
										"refresh_details": {
											"type": "object",
											"description": "Details of the refresh operation."
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Integration not found.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Integrations"
				]
			}
		},
		"/sync_data_from_integration": {
			"post": {
				"summary": "Sync Data from Integration",
				"description": "Syncs data from a specific integration.",
				"parameters": [
					{
						"name": "integration_id",
						"in": "query",
						"required": true,
						"description": "The ID of the integration to sync data from.",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Integration data Syncing.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "boolean",
											"description": "Status of the operation."
										},
										"message": {
											"type": "string",
											"description": "Message describing the result."
										},
										"integration_id": {
											"type": "string",
											"description": "The ID of the integration."
										},
										"sync_details": {
											"type": "object",
											"description": "Details of the sync operation."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Integration not found.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Integrations"
				]
			}
		},
		"/create_integration_type_2": {
			"post": {
				"summary": "Create Type 2 Integration",
				"description": "Creates a new integration of type 2, typically involving file uploads.",
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"files": {
										"type": "array",
										"items": {
											"type": "string",
											"format": "binary",
											"description": "The files to upload for the integration."
										}
									},
									"tenant_id": {
										"type": "string",
										"description": "The ID of the tenant associated with the integration."
									},
									"name": {
										"type": "string",
										"description": "The name of the integration."
									},
									"description": {
										"type": "string",
										"description": "The description of the integration."
									}
								},
								"required": [
									"files",
									"tenant_id"
								]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Files uploaded successfully.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "boolean",
											"description": "Status of the operation."
										},
										"message": {
											"type": "string",
											"description": "Message describing the result."
										},
										"integration_id": {
											"type": "string",
											"description": "The ID of the created integration."
										},
										"files": {
											"type": "array",
											"items": {
												"type": "object",
												"description": "Metadata of the uploaded files."
											},
											"description": "Metadata of the uploaded files."
										},
										"sync_details": {
											"type": "object",
											"description": "Details of the sync operation."
										},
										"integration_status": {
											"type": "string",
											"description": "The status of the integration."
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"detail": {
											"type": "string",
											"description": "Error message."
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Integrations"
				]
			}
		},
		"/create_integration_type_3": {
			"post": {
				"summary": "Create Type 3 Integration",
				"description": "Creates a new integration of type 3, typically involving database credentials.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"db_host": {
										"type": "string",
										"description": "The database host."
									},
									"db_port": {
										"type": "integer",
										"description": "The database port."
									},
									"db_user": {
										"type": "string",
										"description": "The database user."
									},
									"db_password": {
										"type": "string",
										"description": "The database password."
									},
									"db_name": {
										"type": "string",
										"description": "The database name."
									},
									"provider": {
										"type": "string",
										"description": "The provider of the integration (e.g., 'postgres')."
									}
								},
								"required": [
									"db_host",
									"db_port",
									"db_user",
									"db_password",
									"db_name",
									"provider"
								]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Type 3 Integration created",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Message describing the result."
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Integrations"
				]
			}
		},
		"/api/rag/chat_completion": {
			"post": {
				"summary": "Chat Completions",
				"description": "Performs a chat completion using RAG (Retrieval Augmented Generation).",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"connection_id": {
										"type": "string",
										"description": "The ID of the connection to use for the chat."
									},
									"stream": {
										"type": "boolean",
										"description": "Whether to stream the chat response."
									},
									"chat_id": {
										"type": "string",
										"description": "The ID of the chat session (optional)."
									},
									"rag_name": {
										"type": "string",
										"description": "The name of the RAG configuration to use (optional)."
									},
									"llm_model_config": {
										"type": "object",
										"description": "Configuration for the LLM model (optional).",
										"properties": {
											"model_provider": {
												"type": "string",
												"description": "The provider of the LLM model (e.g., 'openai')."
											},
											"model_name": {
												"type": "string",
												"description": "The name of the LLM model (e.g., 'gpt-4o')."
											},
											"temperature": {
												"type": "number",
												"format": "float",
												"description": "The temperature setting for the LLM model."
											},
											"max_tokens": {
												"type": "integer",
												"description": "The maximum number of tokens for the LLM model."
											},
											"top_p": {
												"type": "number",
												"format": "float",
												"description": "The top_p setting for the LLM model."
											},
											"frequency_penalty": {
												"type": "number",
												"format": "float",
												"description": "The frequency penalty setting for the LLM model."
											},
											"presence_penalty": {
												"type": "number",
												"format": "float",
												"description": "The presence penalty setting for the LLM model."
											}
										}
									},
									"message": {
										"type": "string",
										"description": "The message to send to the chat."
									}
								},
								"required": [
									"connection_id",
									"stream",
									"message"
								]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful chat completion."
					}
				},
				"tags": [
					"RAG"
				]
			}
		},
		"/api/connections/create_connection": {
			"post": {
				"summary": "Create Connection",
				"description": "Creates a new connection with specified configurations.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"connection_name": {
										"type": "string",
										"description": "The name of the connection."
									},
									"connection_description": {
										"type": "string",
										"description": "The description of the connection."
									},
									"tenant_id": {
										"type": "string",
										"description": "The ID of the tenant associated with the connection."
									},
									"llm_model_config": {
										"type": "object",
										"description": "Configuration for the LLM model.",
										"properties": {
											"model_provider": {
												"type": "string",
												"description": "The provider of the LLM model (e.g., 'openai')."
											},
											"model_name": {
												"type": "string",
												"description": "The name of the LLM model (e.g., 'gpt-4o')."
											},
											"temperature": {
												"type": "number",
												"format": "float",
												"description": "The temperature setting for the LLM model (optional)."
											},
											"max_tokens": {
												"type": "integer",
												"description": "The maximum number of tokens for the LLM model (optional)."
											},
											"top_p": {
												"type": "number",
												"format": "float",
												"description": "The top_p setting for the LLM model (optional)."
											},
											"frequency_penalty": {
												"type": "number",
												"format": "float",
												"description": "The frequency penalty setting for the LLM model (optional)."
											},
											"presence_penalty": {
												"type": "number",
												"format": "float",
												"description": "The presence penalty setting for the LLM model (optional)."
											}
										},
										"required": [
											"model_provider",
											"model_name"
										]
									},
									"rag_config": {
										"type": "object",
										"description": "Configuration for the RAG (Retrieval Augmented Generation).",
										"properties": {
											"agent_type": {
												"type": "string",
												"description": "The type of agent (e.g., 'customer_service_agent', 'salesforce_agent')."
											},
											"integration_ids": {
												"type": "array",
												"items": {
													"type": "string",
													"description": "The IDs of the integrations to use."
												}
											},
											"system_prompt": {
												"type": "string",
												"description": "The system prompt for the RAG agent (optional)."
											},
											"level1_prompt": {
												"type": "string",
												"description": "The level 1 prompt for the RAG agent (optional)."
											},
											"level2_prompt": {
												"type": "string",
												"description": "The level 2 prompt for the RAG agent (optional)."
											}
										},
										"required": [
											"agent_type",
											"integration_ids"
										]
									}
								},
								"required": [
									"connection_name",
									"connection_description",
									"tenant_id",
									"llm_model_config",
									"rag_config"
								]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Connection created successfully."
					}
				},
				"tags": [
					"Connections"
				]
			}
		},
		"/api/connections/get_connection": {
			"get": {
				"summary": "View Connection by Connection ID",
				"description": "Retrieves a specific connection by its ID.",
				"parameters": [
					{
						"name": "connection_id",
						"in": "query",
						"required": true,
						"description": "The ID of the connection.",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful retrieval of the connection."
					}
				},
				"tags": [
					"Connections"
				]
			}
		},
		"/api/connections/get_all_connections": {
			"get": {
				"summary": "View Connection by Tenant ID",
				"description": "Retrieves all connections associated with a given tenant ID.",
				"parameters": [
					{
						"name": "tenant_id",
						"in": "query",
						"required": true,
						"description": "The ID of the tenant.",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful retrieval of connections."
					}
				},
				"tags": [
					"Connections"
				]
			}
		},
		"/api/connections/delete_connection": {
			"delete": {
				"summary": "Delete Connection",
				"description": "Deletes a specific connection by its ID and tenant ID.",
				"parameters": [
					{
						"name": "connection_id",
						"in": "query",
						"required": true,
						"description": "The ID of the connection to delete.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "tenant_id",
						"in": "query",
						"required": true,
						"description": "The ID of the tenant.",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Connection deleted successfully."
					}
				},
				"tags": [
					"Connections"
				]
			}
		}
	},
	"tags": [
		{
			"name": "Integrations",
			"description": "Endpoints for managing integrations."
		},
		{
			"name": "RAG",
			"description": "Endpoints for performing RAG-based chat completions."
		},
		{
			"name": "Connections",
			"description": "Endpoints for managing connections."
		}
	]
}